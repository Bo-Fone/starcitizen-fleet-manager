#!/usr/bin/env groovy

node {
    currentBuild.result = "SUCCESS"

    try {
        stage('Checkout') {
            cleanWs()
            checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'sc-fleet-manager.traefik.test', url: 'git@github.com:Ioni14/starcitizen-fleet-manager.git']]])
            env.APP_VERSION = env.BUILD_ID
        }

        stage('Build prod') {
            withCredentials([file(credentialsId: 'APP_ENV_FILE', variable: 'APP_ENV_FILE')]) {
                sh 'rm -f .env; cp $APP_ENV_FILE .env'
            }
            withCredentials([string(credentialsId: 'DOCKER_HUB_PASSWORD', variable: 'DOCKER_HUB_PASSWORD')]) {
                sh "echo $DOCKER_HUB_PASSWORD | docker login --username ioni --password-stdin"
            }

            echo "Build PHP-FPM image..."
            sh "docker build -t ioni/sc-fleet-manager_php:${env.APP_VERSION} -t ioni/sc-fleet-manager_php:latest --target build_php -f docker/Dockerfile ."
            sh "docker push ioni/sc-fleet-manager_php:${env.APP_VERSION}"
            sh "docker push ioni/sc-fleet-manager_php:latest"

            echo "Build Apache image..."
            sh "docker build -t ioni/sc-fleet-manager_apache:${env.APP_VERSION} -t ioni/sc-fleet-manager_apache:latest --target build_apache -f docker/Dockerfile ."
            sh "docker push ioni/sc-fleet-manager_apache:${env.APP_VERSION}"
            sh "docker push ioni/sc-fleet-manager_apache:latest"

            echo "Remove dangling images..."
            sh 'docker image rm $(docker image ls -q -f dangling=true) 2>/dev/null || :'

            sh "docker logout"
            sh "rm -f .env"
        }

        stage('Blue-green Deployment') {
            mail([body: "<p><strong>Need user input.</strong></p><p>Job <strong>${env.JOB_NAME}</strong> - Build <strong>${env.BUILD_NUMBER}</strong><br/>Build URL : <a href='${env.BUILD_URL}'>${env.BUILD_URL}</a><br/>Go to build page then Open Blue Ocean.</p>", cc: '', charset: 'UTF-8', mimeType: 'text/html', subject: "[Jenkins] ${env.JOB_NAME} : Need user input", to: "${env.NOTIFICATION_EMAIL_TO}"])

            timeout(time: 30, unit: 'MINUTES') {
                env.TARGET_ROLE = input([message: 'Some questions...', ok: 'Deploy!', parameters: [choice(name: 'Target deployment', choices: "blue\ngreen", description: 'Which target deployment ?')]])
            }

            echo "Configure k8s templates..."
            sh """
                rm -f k8s/*-green.* k8s/*-blue.*
                for template in k8s/templates/*.template; do
                    filename=\$(basename \${template})
                    extension=\$(echo \${filename} | sed -r "s/.+\\.(.+)\\.template/\\1/")
                    filename=\$(echo \${filename} | sed -r "s/(.+)\\..+\\.template/\\1/")
                    envsubst < \${template} > k8s/\${filename}-${env.TARGET_ROLE}.\${extension}
                    echo "\${filename}-${env.TARGET_ROLE}.\${extension} configured"
                done"""

            withKubeConfig([
                credentialsId: 'K8S_CLUSTER_CERT',
                serverUrl: "${K8S_CLUSTER_URL}",
                contextName: "${K8S_CLUSTER_CONTEXT}"
            ]) {
                sh 'kubectl apply -f k8s/'

                // sh 'kubectl annotate ingress traefik-sc-fleet-manager --overwrite traefik.ingress.kubernetes.io/service-weights="{apache-green-cluster-ip: 0%, apache-blue-cluster-ip: 100%}"'
            }
        }
    } catch (err) {
        currentBuild.result = "FAILURE"

        mail([body: "<p><strong>Build failed.</strong></p><p>Job <strong>${env.JOB_NAME}</strong> - Build <strong>${env.BUILD_NUMBER}</strong><br/>Build URL : <a href='${env.BUILD_URL}'>${env.BUILD_URL}</a><br/>Go to build page then Open Blue Ocean.</p>", cc: '', charset: 'UTF-8', mimeType: 'text/html', subject: "[Jenkins] ${env.JOB_NAME} : build failed", to: "${env.NOTIFICATION_EMAIL_TO}"])

        throw err
    }
}
